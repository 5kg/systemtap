// User context tapset
// Copyright (C) 2010-2011 Red Hat Inc.
//
// This file is part of systemtap, and is free software.  You can
// redistribute it and/or modify it under the terms of the GNU General
// Public License (GPL); either version 2, or (at your option) any
// later version.

/**
 * sfunction umodname - Returns the (short) name of the user module.
 * @addr: User-space address
 *
 * Returns the short name of the user space module for the current task that
 * that the given address is part of. Returns "<unknown>" when the address
 * isn't in a (mapped in) module, or the module cannot be found for some reason.
 */
function umodname:string (addr:long) %{
/* pure */ /* myproc-unprivileged */ /* pragma:vma */
  const char *name = NULL;
  _stp_umod_lookup(STAP_ARG_addr, current, &name, NULL, NULL);
  if (!name)
    name = "<unknown>";
  strlcpy (STAP_RETVALUE, name, MAXSTRINGLEN);
%}

/**
 *  sfunction ucallers - return list of PCs at top n levels of user stack
 *  @n: number of levels to descend in the stack (not counting the top
 *  level). If n is -1, print the entire stack.
 */
function ucallers:string (n:long) {
         str = ""; l = 0
         for (i = 0; i <= n || n == -1; i++) {
             foo = i > 0 ? " " : ""
             try {
                 foo .= sprintf("0x%x", ustack(i))
             } catch { /* assume we've hit the end of the stack */
                 if (n == -1) break
                 @__context_unwind_error(n)
             }
             // ensure string cuts off cleanly at MAXSTRINGLEN:
             l += strlen(foo); if (l > %{ MAXSTRINGLEN %}) break
             str .= foo
         }
         return str
}
